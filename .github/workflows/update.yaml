---
name: "update"

on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  TRACE: "true"

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Create matrix
        id: matrix
        run: |
          [ -z "$TRACE" ] || set -x
          # generate a list of paks from the paks.json file
          # with the names of the paks and the type of the pak
          # the list should be like this:
          # [{"name": "Dreamcast", "type": "Emu"}, {"name": "N64", "type": "Emu"}]

          paks="[]"
          while read -r pak; do
            pak="{\"pak_name\": \"$(echo "$pak" | jq -r '.pak_name')\", \"type\": \"Emu\"}"
            paks="$(jq -c ". += [$pak]" <<< "$paks")"
          done < <(jq -c '.emu_paks[]' paks.json)
          while read -r pak; do
            pak="{\"pak_name\": \"$(echo "$pak" | jq -r '.pak_name')\", \"type\": \"Tool\"}"
            paks="$(jq -c ". += [$pak]" <<< "$paks")"
          done < <(jq -c '.tool_paks[]' paks.json)
          echo "matrix=$paks" >> "$GITHUB_OUTPUT"

  update:
    runs-on: ubuntu-latest
    needs: create-matrix
    strategy:
      matrix:
        pak: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Fetch current version
        id: current_version
        run: |
          [ -z "$TRACE" ] || set -x
          pak_key="emu_paks"
          if [[ "${{ matrix.pak.type }}" == "Tool" ]]; then
              pak_key="tool_paks"
          fi
          current_version=$(jq -r --arg name "${{ matrix.pak.pak_name }}" --arg pak_key "$pak_key" '.[$pak_key][] | select(.pak_name == $name) | .version' paks.json)
          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

      - name: Update pak
        run: make update-pak PAK_NAME="${{ matrix.pak.pak_name }}" PAK_TYPE="${{ matrix.pak.type }}"

      - name: Check for changes
        id: push-changes
        run: |
          [ -z "$TRACE" ] || set -x
          if ! git diff --name-only HEAD | grep -q paks.json; then
            echo "No changes to paks.json, skipping"
            echo "changes=false" >> "$GITHUB_OUTPUT"
            echo "branch-name=null" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "changes=true" >> "$GITHUB_OUTPUT"

          pak_key="emu_paks"
          if [[ "${{ matrix.pak.type }}" == "Tool" ]]; then
              pak_key="tool_paks"
          fi
          new_version=$(jq -r --arg name "${{ matrix.pak.pak_name }}" --arg pak_key "$pak_key" '.[$pak_key][] | select(.pak_name == $name) | .version' paks.json)

          branch_name="pakbot/paks/paks.json/${{ matrix.pak.pak_name }}-$new_version"
          if git show-ref --quiet refs/heads/"$branch_name"; then
            echo "Branch $branch_name already exists, skipping"
            echo "changes=false" >> "$GITHUB_OUTPUT"
            echo "branch-name=null" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "branch-name=$branch_name" >> "$GITHUB_OUTPUT"

          repository=$(jq -r --arg name "${{ matrix.pak.pak_name }}" --arg pak_key "$pak_key" '.[$pak_key][] | select(.pak_name == $name) | .repository' paks.json)
          if [[ -z "$repository" ]]; then
            echo "No repository found for '$PAK_NAME' in type '$PAK_TYPE'"
            exit 1
          fi

          repository_owner=$(echo "$repository" | cut -d'/' -f4)
          repository_name=$(echo "$repository" | cut -d'/' -f5)

          echo "new-version=$new_version" >> "$GITHUB_OUTPUT"
          echo "repository-owner=$repository_owner" >> "$GITHUB_OUTPUT"
          echo "repository-name=$repository_name" >> "$GITHUB_OUTPUT"

      - name: Commit changes if necessary
        id: commit-message
        if: steps.push-changes.outputs.changes == 'true'
        run: |
          [ -z "$TRACE" ] || set -x
          commit_message="chore(deps): bump ${{ matrix.pak.pak_name }} from ${{ steps.current_version.outputs.current_version }} to ${{ steps.push-changes.outputs.new-version }} in paks.json"

          pr_body=$(
          cat <<'EOF'
          Bumps ${{ matrix.pak.pak_name }} from ${{ steps.current_version.outputs.current_version }} to ${{ steps.push-changes.outputs.new-version }}.

          Changes between versions can be viewed [here](https://github.com/$repository_owner/$repository_name/compare/${{ steps.current_version.outputs.current_version }}...${{ steps.push-changes.outputs.new-version }}).
          EOF
          )

          echo "pr-body=$pr_body" >> "$GITHUB_OUTPUT"
          git checkout -b "${{ steps.push-changes.outputs.branch-name }}"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add paks.json
          git commit -m "$(printf '%s\n\n%s' "$commit_message" "$pr_body")"

      - name: Push and create PR
        if: steps.push-changes.outputs.changes == 'true'
        run: |
          [ -z "$TRACE" ] || set -x
          git push --set-upstream origin "${{ steps.push-changes.outputs.branch-name }}"
          gh pr create --base main --head "${{ steps.push-changes.outputs.branch-name }}" --title "$commit_message" --body "${{ steps.push-changes.outputs.pr-body }}"
